yt_oauth(app_id = app_id, app_secret = app_password, token = '')
data <-  yt_search("barack obama")
get_stats(video_id = "N708P-A45D0")
yt_oauth(app_id = app_id, app_secret = app_password, token = '')
yt_oauth(app_id = app_id, app_secret = app_password)
data <-  yt_search("barack obama")
library(tuber)
app_id <- "1046548200610-7s5vbqehtko7u06khh5706bf78m4g1nl.apps.googleusercontent.com"
app_password <- "tt4OYTRNUFNn7SuD8BHJxSY1"
yt_oauth(app_id = app_id, app_secret = app_password)
data <-  yt_search("barack obama")
article <- yt_search("the satanic temple")
no_article <- yt_search("satanic temple")
caps <- yt_search("The Satanic Temple")
cos <- yt_search("church of satan")
lg <- yt_search("Lucien Greaves")
pg <- yt_search("Peter Gilmore")
satan <- yt_search("satan")
satanists <- yt_search("satanists")
satanism <- yt_search("satanism")
loc <- yt_search("satanic temple", location = (42.519444, -70.897222))
loc <- yt_search("satanic temple", location = "(42.519444, -70.897222)")
loc <- yt_search("satanic temple", location = "42.519444,-70.897222")
yt_oauth(app_id = app_id, app_secret = app_password, token = '')
loc <- yt_search("satanic temple", location = "42.519444,-70.897222")
loc <- yt_search("satanic temple", location = "(42.519444,-70.897222)")
View(satan)
lv <- yt_search("Anton LaVey")
View(lv)
loc <- yt_search("satanic temple", location = ("42.519444", "-70.897222")
loc <- yt_search("satanic temple", location = ("42.519444,-70.897222")
loc <- yt_search("satanic temple", location = ("42.519444,-70.897222"))
loc <- yt_search("satanic temple", location = ("42.519444,-70.897222"))
satanic <- yt_search("satanic")
yt_oauth(app_id = app_id, app_secret = app_password, token = '')
satanic <- yt_search("satanic")
library(tuber)
app_id <- "1046548200610-7s5vbqehtko7u06khh5706bf78m4g1nl.apps.googleusercontent.com"
app_password <- "tt4OYTRNUFNn7SuD8BHJxSY1"
yt_oauth(app_id = app_id, app_secret = app_password, token = '')
View(no_article)
tst <-yt_search("satanictemple")
View(data)
lingtypology::map.feature
tuber::yt_search
library(tuber)
app_id <- "1046548200610-7s5vbqehtko7u06khh5706bf78m4g1nl.apps.googleusercontent.com"
app_password <- "tt4OYTRNUFNn7SuD8BHJxSY1"
yt_oauth(app_id = app_id, app_secret = app_password, token = '')
tstchannel <- list_channel_videos(channel_id = "UCYIv7bicSK4NBL_lgH61zIw")
View(tstchannel)
coschannel <- list_channel_videos(channel_id = "churchofsatanvideos")
yt_oauth(app_id = app_id, app_secret = app_password, token = '')
coschannel <- list_channel_videos(channel_id = "churchofsatanvideos")
library(tuber)
app_id <- "1046548200610-7s5vbqehtko7u06khh5706bf78m4g1nl.apps.googleusercontent.com"
app_password <- "tt4OYTRNUFNn7SuD8BHJxSY1"
yt_oauth(app_id = app_id, app_secret = app_password, token = '')
tst <-yt_search("satanictemple")
coschannel <- list_channel_videos(channel_id = "churchofsatanvideos")
obama <- data
View(tstchannel)
tstvideos <- tstchannel$contentDetails.videoId
get_video_details(video_id = tstvideos)
get_video_details(video_id = c(tstvideos)
get_video_details(video_id = c(tstvideos))
get_video_details(video_id = c(tstvideos))
get_video_details(video_id = tstvideos)
tstchannel$contentDetails.videoId[1]
get_video_details(video_id = "7RKVt08p5D4")
article$term <- rep("the satanic temple", 4)
no_article$term <- rep("satanic temple", 22)
View(caps)
View(article)
cos$term <- rep("church of satan", 25)
View(lv)
lv$description
View(pg)
tstset <- rbind(no_article, cos)
View(tstset)
table(tstset$channelTitle)
table(satan$channelTitle)
View(tstchannel)
botbor <- read_tsv("botlikh_all.csv")
library(tidyverse)
botbor <- read_tsv("botlikh_all.csv")
table(botbor$borrowing_source_language)
library(tidyverse)
botbor <- read_tsv("botlikh_all.csv")
table(botbor$borrowing_source_language)
botbor <- read_tsv("botlikh_all.csv")
a <- botbor[(botbor$letter == 'a'),]
table(a$borrowing_source_language)
a <- botbor[(botbor$letter == "a"),]
View(a)
a <- botbor[complete.cases(botbor$letter),]
table(a$borrowing_source_language)
satanism$term2 <- rep("satanism")
View(satanism)
library(tidyverse)
cos <- read_csv("coschstats")
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# packages
library(DT)
library(tidyverse)
library(lingtypology)
# data
trans <- read_tsv("/home/samira/Git/dissertation_evidentiality/transcr.csv") # transcription correspondences
vill <- read_tsv("data/villages.csv") # villages, coordinates and languages
lang <- read_tsv("data/languages.csv") # languages, affiliation and glottocodes
col <- read_tsv("data/colors.csv") # color schemes
glot <- read_tsv("data/glottolog_points.csv") # language coordinates from Glottolog
sys <- read_tsv("data/system.csv") # EC evidential systems per language
sys <- merge(sys, lang, by = "lang")
sys <- merge(sys, glot, by = "lang")
perfects <- read_tsv("data/perfects.csv") # perfects and their meanings in EC
part <- read_tsv("data/particles.csv") # particles with evidential(ish) meanings
mark <- read_tsv("data/marketlang.csv") # distribution of so called "market languages" in the East Caucasus
# filter wals data
wals <- sys[complete.cases(sys$coding),]
# draw map
map.feature(lang.gltc(wals$gltc),
latitude = wals$lat,
longitude = wals$lon,
features = wals$coding,
color = wals$col,
title = "Coding of Evidentiality",
width = 8,
tile = c("Esri.WorldTopoMap"),
zoom.level = 6,
label = wals$lang,
popup = wals$ref)
# draw map
map.feature(lang.gltc(sys$gltc),
latitude = sys$lat,
longitude = sys$lon,
features = sys$corr,
color = sys$corr_col,
title = "Coding of Evidentiality",
width = 8,
tile = c("Esri.WorldTopoMap"),
zoom.level = 6,
label = sys$lang,
popup = sys$corr_ref)
# combine villages with glottocodes and colorschemes
vill_nona <- vill[complete.cases(vill$lat),]
vill_gltc <- merge(vill_nona, lang, by = "lang")
vill_col <- merge(vill_gltc, col, by = "lang")
# order the languages in the legend nicely (by default they are in alphabetical order)
vill_col$lang <- factor(vill_col$lang, levels =c(
"Dargwa", "Lak", "Bats", "Ingush", "Chechen", "Khinalug", "Archi", "Tsakhur", "Rutul", "Kryz", "Budukh", "Udi", "Lezgian", "Agul", "Tabasaran", "Avar", "Andi", "Botlikh", "Godoberi", "Chamalal", "Bagvalal", "Tindi", "Karata", "Akhvakh", "Tsez", "Hinuq", "Bezhta", "Hunzib", "Khwarshi", "Armenian", "Kumyk", "Nogai", "Azerbaijani"))
# draw map
map.feature(lang.gltc(vill_col$gltc),
latitude = vill_col$lat,
longitude = vill_col$lon,
features = vill_col$lang,
title = "Language",
color = vill_col$datacol,
width = 4,
zoom.control = T,
label = vill_col$lang,
popup = paste("Village:", vill_col$name),
minimap = T,
minimap.position = "bottomleft",
tile = c("Esri.WorldTopoMap", "OpenStreetMap.Mapnik"),
tile.name = c("English placenames", "Local placenames"))
# order the languages in the legend nicely (by default they are in alphabetical order)
vill_col$lang <- factor(vill_col$lang, levels =c(
"Dargwa", "Lak", "Bats", "Ingush", "Chechen", "Khinalug", "Archi", "Tsakhur", "Rutul", "Kryz", "Budukh", "Udi", "Lezgian", "Agul", "Tabasaran", "Avar", "Andi", "Botlikh", "Godoberi", "Chamalal", "Bagvalal", "Tindi", "Karata", "Akhvakh", "Tsez", "Hinuq", "Bezhta", "Hunzib", "Khwarshi", "Armenian", "Kumyk", "Nogai", "Azerbaijani"))
# draw map
map.feature(lang.gltc(vill_col$gltc),
latitude = vill_col$lat,
longitude = vill_col$lon,
features = vill_col$lang,
title = "Language",
width = 3,
zoom.control = T,
color = vill_col$datacol,
popup = paste("Village:", vill_col$name)) %>%
map.feature(lang.gltc(sys$gltc),
features = sys$corr,
color = sys$corr_col,
width = 8,
label = sys$lang,
legend.position = "bottomleft",
title = "Coding of Evidentiality",
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
sys <- sys %>%
mutate(tense = case_when(
corr == "Part of the tense system" ~ "yes",
corr == "Mixed" ~"yes",
TRUE ~ "no"))
sys_col <- left_join(sys, col, by = "lang")
sys_col$tense <- factor(sys_col$tense, levels = c("yes", "no"))
sys_col$lang <- factor(sys_col$lang, levels = c("Ingush", "Chechen", "Bats", "Bezhta", "Hinuq", "Hunzib", "Khwarshi", "Tsez", "Avar", "Akhvakh", "Andi", "Bagvalal", "Botlikh", "Chamalal", "Godoberi", "Karata", "Tindi", "Dargwa", "Lak", "Agul", "Archi", "Budukh", "Kryz", "Lezgian", "Rutul", "Tabasaran", "Tsakhur", "Udi", "Khinalug", "Kumyk", "Nogai", "Azerbaijani"))
map.feature(lang.gltc(sys_col$gltc),
features = sys_col$lang,
title = "Language",
color = sys_col$datacol,
width = 5,
stroke.features = sys_col$tense,
stroke.color = c("grey", "white"),
stroke.title = "Evidentiality and tense",
stroke.radius = 13,
label = sys_col$lang,
zoom.level = 7,
popup = paste("Source(s):", sys_col$corr_ref),
tile = c("Esri.WorldGrayCanvas"))
sys_col$lang <- factor(sys_col$lang, levels = c("Ingush", "Chechen", "Bats", "Bezhta", "Hinuq", "Hunzib", "Khwarshi", "Tsez", "Avar", "Akhvakh", "Andi", "Bagvalal", "Botlikh", "Chamalal", "Godoberi", "Karata", "Tindi", "Dargwa", "Lak", "Agul", "Archi", "Budukh", "Kryz", "Lezgian", "Rutul", "Tabasaran", "Tsakhur", "Udi", "Khinalug", "Kumyk", "Nogai", "Azerbaijani"))
sys_col$perfect <- factor(sys_col$perfect, levels = c("yes", "no"))
map.feature(lang.gltc(sys_col$gltc),
features = sys_col$lang,
title = "Language",
color = sys_col$datacol,
width = 5,
stroke.features = sys_col$perfect,
stroke.color = c("grey", "white"),
stroke.title = "Evidentiality and tense",
stroke.radius = 13,
label = sys_col$lang,
zoom.level = 7,
popup = paste("Source(s):", sys_col$corr_ref),
tile = c("Esri.WorldGrayCanvas"))
allang <- dataperf %>%
filter(type == "perfectoid") %>%
select(idiom, "function") %>%
group_by(idiom) %>%
mutate(count = n())
allang <- perfects %>%
filter(type == "perfectoid") %>%
select(idiom, "function") %>%
group_by(idiom) %>%
mutate(count = n())
dataperf <- perfects %>%
select(form, type, evidential, meaning, lang, variant, ref)
colnames(dataperf)[c(4,6)] <- c("function", "idiom")
datatable(dataperf, class = 'cell-border stripe', rownames = F, filter = 'top', options = list(pageLength = 70, autoWidth = T))
allang <- perfects %>%
filter(type == "perfectoid") %>%
select(idiom, "function") %>%
group_by(idiom) %>%
mutate(count = n())
allang <- dataperf %>%
filter(type == "perfectoid") %>%
select(idiom, "function") %>%
group_by(idiom) %>%
mutate(count = n())
allang_un <- allang[!duplicated(allang$idiom),]
allang_un$mean <- mean(allang_un$count)
View(cos)
setwd("~/Git/2019_spbsampling")
library(tidyverse)
library(lingtypology)
wals_codes <- read_tsv("/data/wals_codes.tsv")
wals_codes <- read_tsv("data/wals_codes.tsv")
wals_codes <- read_tsv("~/data/wals_codes.tsv")
wals_codes <- read_tsv("~data/wals_codes.tsv")
wals_codes <- read_tsv("data/wals_codes.tsv")
wals_codes <- read_tsv("data/walscodes.tsv")
wals_lang <- read_tsv("data/walscodes.tsv")
sample100 <- wals_lang[(wals_lang$`sample 100` == TRUE),]
sample200 <- wals_lang[(wals_lang$`sample 200` == TRUE),]
rm(list=ls())
setwd("~/Git/2019_spbsampling")
library(tidyverse)
library(lingtypology)
wals_lang <- read_tsv("data/walscodes.tsv") # tsv file was downloaded via wals.info
sample100 <- wals_lang[(wals_lang$`sample 100` == TRUE),]
sample200 <- wals_lang[(wals_lang$`sample 200` == TRUE),]
wals_ev <- wals.feature(c("78a", "77a"))
wals_ev <- wals.feature(c("78a", "77a")) # somehow less values this way -- CHECK
lang <- read_tsv("data/languages.csv") # languages, affiliation and glottocodes
col <- read_tsv("data/colors.csv") # color schemes
glot <- read_tsv("data/glottolog_points.csv") # language coordinates from Glottolog
sys <- read_tsv("data/system.csv") # EC evidential systems per language
sys <- merge(sys, lang, by = "lang")
sys <- merge(sys, glot, by = "lang")
part <- read_tsv("data/particles.csv") # particles with evidential(ish) meanings
vill <- read_tsv("data/villages.csv") # villages, coordinates and languages
vill_nona <- vill[complete.cases(vill$lat),] # remove villages without coordinates
vill_gltc <- merge(vill_nona, lang, by = "lang")
vill_col <- merge(vill_gltc, col, by = "lang")
vill <- read_tsv("data/villages.csv") # villages, coordinates and languages
lang <- read_tsv("data/languages.csv") # languages, affiliation and glottocodes
col <- read_tsv("data/colors.csv") # color schemes
glot <- read_tsv("data/glottolog_points.csv") # language coordinates from Glottolog
sys <- read_tsv("data/system.csv") # EC evidential systems per language
sys <- merge(sys, lang, by = "lang")
sys <- merge(sys, glot, by = "lang")
part <- read_tsv("data/particles.csv") # particles with evidential(ish) meanings
vill <- read_tsv("data/villages.csv") # villages, coordinates and languages
vill_nona <- vill[complete.cases(vill$lat),] # remove villages without coordinates
vill_gltc <- merge(vill_nona, lang, by = "lang")
vill_col <- merge(vill_gltc, col, by = "lang")
coding <- wals_ev[complete.cases(wals_ev$`78a`),]
View(wals_ev)
map.feature(lang.gltc(wals_ev$glottocode),
latitude = wals_ev$latitude,
longitude = wals_ev$longitude,
features = wals_ev$feature,
title = "Coding of Evidentiality",
rectangle.lng = c(30, 60),
rectangle.lat = c(30, 50),
rectangle.color = "forestgreen",
color = c("snow3", "yellow", "white", "red3", "blue", "orchid2"),
tile = c("Esri.WorldGrayCanvas"))
map.feature(lang.gltc(wals_ev$glottocode),
latitude = wals_ev$latitude,
longitude = wals_ev$longitude,
features = wals_ev$feature,
title = "Coding of Evidentiality",
rectangle.lng = c(30, 60),
rectangle.lat = c(30, 50),
rectangle.color = "forestgreen",
tile = c("Esri.WorldGrayCanvas"))
map.feature(lang.gltc(wals_ev$glottocode))
map.feature(lang.gltc(wals_ev$glottocode),
latitude = wals_ev$latitude,
longitude = wals_ev$longitude)
map.feature(lang.gltc(wals_ev$glottocode),
latitude = wals_ev$latitude,
longitude = wals_ev$longitude,
features = wals_ev$`78a`,
title = "Coding of Evidentiality",
rectangle.lng = c(30, 60),
rectangle.lat = c(30, 50),
rectangle.color = "forestgreen",
color = c("snow3", "yellow", "white", "red3", "blue", "orchid2"),
tile = c("Esri.WorldGrayCanvas"))
map.feature(lang.gltc(vill_col$gltc),
latitude = vill_col$lat,
longitude = vill_col$lon,
features = vill_col$group.x,
title = "Group",
color = vill_col$groupcol,
width = 4,
minimap = T,
minimap.position = "bottomleft",
tile = c("Esri.WorldGrayCanvas"))
evidentiality_maps <- wals_ev %>%
select(sample, macroarea)
wals_ev_area <- merge(wals_ev, wals_lang, by = "id")
View(wals_lang)
colnames(wals_lang)[1] <- "id"
View(wals_ev)
colnames(wals_ev)[1] <- "id"
wals_ev_area <- merge(wals_ev, wals_lang, by = "id")
wals_ev_area$sample <- "evidentiality maps"
View(wals_ev_area)
View(sample100)
sample100$sample <- "100 sample"
ev <- wals_ev_area %>%
select(sample, macroarea)
hundred <- sample100 %>%
select(sample, macroarea)
proportions <- rbind(ev, hundred)
proportions <- rbind(ev, hundred)
ggplot(proportions, aes(x = sample, fill = macroarea)) +
geom_bar(position = "fill")+
scale_fill_brewer(palette="RdPu")+
theme_classic()
wals <- sys[complete.cases(sys$coding),]
map.feature(lang.gltc(wals$gltc),
latitude = wals$lat,
longitude = wals$lon,
features = wals$corr,
color = wals$corr_col,
title = "Coding of Evidentiality",
width = 8,
zoom.level = 6,
label = wals$lang,
popup = wals$ref)
map.feature(lang.gltc(wals$gltc),
latitude = wals$lat,
longitude = wals$lon,
features = wals$coding,
color = wals$col,
title = "Coding of Evidentiality",
width = 8,
zoom.level = 6,
label = wals$lang,
popup = wals$ref)
map.feature(lang.gltc(wals$gltc),
latitude = wals$lat,
longitude = wals$lon,
features = wals$corr,
color = wals$corr_col,
title = "Coding of Evidentiality",
width = 8,
zoom.level = 6,
label = wals$lang,
popup = wals$ref)
map.feature(lang.gltc(sys$gltc),
latitude = sys$lat,
longitude = sys$lon,
features = sys$corr,
title = "Coding of Evidentiality",
color = sys$corr_col,
width = 8)
sys <- sys %>%
mutate(tense = case_when(
corr == "Part of the tense system" ~ "yes",
corr == "Mixed" ~"yes",
TRUE ~ "no"))
View(sys)
partev <- part %>%
filter(complete.cases(evidential))
partev$type <- factor(partev$type, levels = c("verb particle", "free particle", "verb form", "no particle"))
map.feature(lang.gltc(sys_col$gltc),
features = sys_col$tense,
legend.position = "bottomright",
title = "Part of tense",
color = c("grey", "white"),
width = 9)%>%
map.feature(partev$lang,
features = partev$type,
shape = c("●", "◍", "○", "◌"),
shape.size = 14,
title = "Evidential clitic type",
legend.position = "topright",
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
map.feature(lang.gltc(sys$gltc),
features = sys$tense,
legend.position = "bottomright",
title = "Part of tense",
color = c("grey", "white"),
width = 9)%>%
map.feature(partev$lang,
features = partev$type,
shape = c("●", "◍", "○", "◌"),
shape.size = 14,
title = "Evidential clitic type",
legend.position = "topright",
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
sys$tense <- factor(sys$tense, levels = c("yes", "no"))
map.feature(lang.gltc(sys$gltc),
features = sys$tense,
legend.position = "bottomright",
title = "Part of tense",
color = c("grey", "white"),
width = 9)%>%
map.feature(partev$lang,
features = partev$type,
shape = c("●", "◍", "○", "◌"),
shape.size = 14,
title = "Evidential clitic type",
legend.position = "topright",
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
map.feature(lang.gltc(sys$gltc),
features = sys$tense,
legend.position = "bottomright",
title = "Part of tense",
color = c("grey", "white"),
width = 9)%>%
map.feature(partev$lang, # add a map on top of the other map
features = partev$type,
shape = c("●", "◍", "○", "◌"),
shape.size = 14,
title = "Evidential clitic type",
legend.position = "topright",
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
sys$perfect <- factor(sys$perfect, levels = c("yes", "no"))
map.feature(lang.gltc(sys_col$gltc),
features = sys_col$perfect,
legend.position = "bottomright",
title = "Evidential perfect",
color = c("grey", "white"),
width = 9)%>%
map.feature(partev$lang,
features = partev$type,
shape = c("●", "◍", "○", "◌"),
shape.size = 14,
title = "Evidential clitic type",
legend.position = "topright",
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
map.feature(lang.gltc(sys$gltc),
features = sys$perfect,
legend.position = "bottomright",
title = "Evidential perfect",
color = c("grey", "white"),
width = 9)%>%
map.feature(partev$lang,
features = partev$type,
shape = c("●", "◍", "○", "◌"),
shape.size = 14,
title = "Evidential clitic type",
legend.position = "topright",
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
vill_col$lang <- factor(vill_col$lang, levels =c(
"Dargwa", "Lak", "Bats", "Ingush", "Chechen", "Khinalug", "Archi", "Tsakhur", "Rutul", "Kryz", "Budukh", "Udi", "Lezgian", "Agul", "Tabasaran", "Avar", "Andi", "Botlikh", "Godoberi", "Chamalal", "Bagvalal", "Tindi", "Karata", "Akhvakh", "Tsez", "Hinuq", "Bezhta", "Hunzib", "Khwarshi", "Armenian", "Kumyk", "Nogai", "Azerbaijani"))
map.feature(lang.gltc(vill_col$gltc),
latitude = vill_col$lat,
longitude = vill_col$lon,
features = vill_col$lang,
title = "Language",
width = 3,
color = vill_col$gencol) %>%
map.feature(lang.gltc(sys$gltc),
features = sys$corr,
color = sys$corr_col,
width = 5,
legend.position = "topleft",
title = "Coding of Evidentiality",
tile = c("Esri.WorldGrayCanvas"),
pipe.data = .)
